{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API_URL","App","useState","latitude","longitude","zoom","height","width","viewport","setViewport","geojsonData","setGeojsonData","earthquake","setEarthquake","useEffect","escapeListener","e","key","a","fetch","response","json","console","log","features","fetchData","window","addEventListener","removeEventListener","mapboxApiAccessToken","process","onViewportChange","mapStyle","map","obj","id","geometry","coordinates","className","onClick","alt","properties","title","src","onClose","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2SAMMA,G,MAAU,6EAsEDC,MApEf,WAAgB,IAAD,EACmBC,mBAAS,CACvCC,SAAU,EACVC,UAAW,EACXC,KAAM,EACNC,OAAQ,QACRC,MAAO,UANI,mBACNC,EADM,KACIC,EADJ,OAQyBP,mBAAS,IARlC,mBAQNQ,EARM,KAQOC,EARP,OASuBT,mBAAS,MAThC,mBASNU,EATM,KASMC,EATN,KAiCb,OAtBAC,qBAAU,WAER,IAAMC,EAAiB,SAAAC,GACP,WAAVA,EAAEC,KACJJ,EAAc,OAJJ,4CAOd,8BAAAK,EAAA,sEACyBC,MAAMnB,GAD/B,cACQoB,EADR,gBAEqBA,EAASC,OAF9B,OAEQA,EAFR,OAGEC,QAAQC,IAAIF,EAAKG,UACjBb,EAAeU,EAAI,UAJrB,4CAPc,sBAiBd,OAjBc,mCAcdI,GACAC,OAAOC,iBAAiB,QAASZ,GAE1B,WACLW,OAAOE,oBAAoB,QAASb,MAErC,IAGD,6BACE,kBAAC,IAAD,iBACMP,EADN,CAEEqB,qBAAsBC,qGACtBC,iBAAkB,SAAAvB,GAAQ,OAAIC,EAAYD,IAC1CwB,SAAS,6DAERtB,EAAYuB,KAAI,SAAAC,GAAG,OAClB,kBAAC,IAAD,CAAQjB,IAAKiB,EAAIC,GACf/B,UAAW8B,EAAIE,SAASC,YAAY,GACpClC,SAAU+B,EAAIE,SAASC,YAAY,IACnC,yBACEC,UAAU,SACVC,QAAS,kBAAM1B,EAAcqB,IAC7BM,IAAKN,EAAIO,WAAWC,MACpBC,IAAI,0EAGT/B,EACC,kBAAC,IAAD,CACER,UAAWQ,EAAWwB,SAASC,YAAY,GAC3ClC,SAAUS,EAAWwB,SAASC,YAAY,GAC1CO,QAAS,kBAAM/B,EAAc,QAC7B,6BACGD,EAAW6B,WAAWC,QAGzB,QCzDQG,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.7863bf8a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport ReactMapGL, { Marker, Popup } from 'react-map-gl';\n\nimport './App.css';\n\nconst API_URL = 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson'\n\nfunction App() {\n  const [viewport, setViewport] = useState({\n    latitude: 0,\n    longitude: 0,\n    zoom: 1,\n    height: \"100vh\",\n    width: \"100vw\",\n  })\n  const [geojsonData, setGeojsonData] = useState([])\n  const [earthquake, setEarthquake] = useState(null)\n\n  useEffect(() => {\n\n    const escapeListener = e => {\n      if (e.key === \"Escape\") {\n        setEarthquake(null)\n      }\n    }\n    async function fetchData() {\n      const response = await fetch(API_URL);\n      const json = await response.json();\n      console.log(json.features)\n      setGeojsonData(json['features'])\n    }\n\n    fetchData()\n    window.addEventListener('keyup', escapeListener)\n\n    return () => {\n      window.removeEventListener('keyup', escapeListener)\n    }\n  }, [])\n\n  return (\n    <div>\n      <ReactMapGL\n        {...viewport}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n        onViewportChange={viewport => setViewport(viewport)}\n        mapStyle=\"mapbox://styles/vijaygenius123/ckbet884i3h1n1ild7sa218oj\"\n      >\n        {geojsonData.map(obj =>\n          <Marker key={obj.id}\n            longitude={obj.geometry.coordinates[0]}\n            latitude={obj.geometry.coordinates[1]}>\n            <img\n              className=\"marker\"\n              onClick={() => setEarthquake(obj)}\n              alt={obj.properties.title}\n              src=\"https://storage.needpix.com/rsynced_images/google-309740_1280.png\">\n            </img>\n          </Marker>)}\n        {earthquake ? (\n          <Popup\n            longitude={earthquake.geometry.coordinates[0]}\n            latitude={earthquake.geometry.coordinates[1]}\n            onClose={() => setEarthquake(null)}>\n            <div>\n              {earthquake.properties.title}\n            </div>\n          </Popup>\n        ) : null}\n      </ReactMapGL>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}